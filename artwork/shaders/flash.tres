[gd_resource type="VisualShader" load_steps=14 format=2]

[sub_resource type="VisualShaderNodeScalarClamp" id=8]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=10]
uniform_name = "Speed"
default_value_enabled = true
default_value = 20.0

[sub_resource type="VisualShaderNodeScalarUniform" id=11]
uniform_name = "Intensity"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeScalarOp" id=12]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=1]
uniform_name = "FlashColor"
default_value_enabled = true

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=3]
source = 5

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=6]

[sub_resource type="VisualShaderNodeVectorOp" id=7]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=13]
function = 0

[resource]
code = "shader_type canvas_item;
uniform float Speed = 20;
uniform vec4 FlashColor : hint_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);
uniform float Intensity = 1;



void vertex() {
// Output:0

}

void fragment() {
// Input:5
	float n_out5p0 = TIME;

// ScalarUniform:12
	float n_out12p0 = Speed;

// ScalarOp:11
	float n_out11p0 = n_out5p0 * n_out12p0;

// ScalarFunc:9
	float n_out9p0 = sin(n_out11p0);

// ScalarClamp:10
	float n_in10p1 = 0.00000;
	float n_in10p2 = 1.00000;
	float n_out10p0 = clamp(n_out9p0, n_in10p1, n_in10p2);

// ColorUniform:2
	vec3 n_out2p0 = FlashColor.rgb;
	float n_out2p1 = FlashColor.a;

// ScalarOp:6
	float n_out6p0 = n_out10p0 * n_out2p1;

// ScalarUniform:13
	float n_out13p0 = Intensity;

// ScalarOp:14
	float n_out14p0 = n_out6p0 * n_out13p0;

// VectorOp:8
	vec3 n_out8p0 = vec3(n_out14p0) * n_out2p0;

// Input:3

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, UV.xy);
		n_out4p0 = TEXTURE_tex_read.rgb;
		n_out4p1 = TEXTURE_tex_read.a;
	}

// VectorOp:7
	vec3 n_out7p0 = n_out8p0 + n_out4p0;

// Output:0
	COLOR.rgb = n_out7p0;
	COLOR.a = n_out4p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 640.668, -158.169 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 3440, 460 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 1240, 400 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 1340, 1080 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 1940, 940 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 400, -160 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( 1940, -200 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 3020, 400 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( 2600, 400 )
nodes/fragment/9/node = SubResource( 13 )
nodes/fragment/9/position = Vector2( 1160, -160 )
nodes/fragment/10/node = SubResource( 8 )
nodes/fragment/10/position = Vector2( 1560, -260 )
nodes/fragment/11/node = SubResource( 9 )
nodes/fragment/11/position = Vector2( 780, -200 )
nodes/fragment/12/node = SubResource( 10 )
nodes/fragment/12/position = Vector2( 180, -20 )
nodes/fragment/13/node = SubResource( 11 )
nodes/fragment/13/position = Vector2( 1240, 60 )
nodes/fragment/14/node = SubResource( 12 )
nodes/fragment/14/position = Vector2( 2280, -200 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 2, 4, 1, 0, 1, 2, 1, 6, 1, 4, 0, 7, 1, 2, 0, 8, 1, 8, 0, 7, 0, 7, 0, 0, 0, 9, 0, 10, 0, 10, 0, 6, 0, 5, 0, 11, 0, 11, 0, 9, 0, 12, 0, 11, 1, 13, 0, 14, 1, 6, 0, 14, 0, 14, 0, 8, 0 )
